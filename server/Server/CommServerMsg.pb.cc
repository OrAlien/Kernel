// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommServerMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommServerMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NetLogicMsgPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetLogicMsgPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetRoomInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlatformType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameRoomInfo_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CommServerMsg_2eproto() {
  protobuf_AddDesc_CommServerMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CommServerMsg.proto");
  GOOGLE_CHECK(file != NULL);
  NetLogicMsgPacket_descriptor_ = file->message_type(0);
  static const int NetLogicMsgPacket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetLogicMsgPacket, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetLogicMsgPacket, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetLogicMsgPacket, data_),
  };
  NetLogicMsgPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetLogicMsgPacket_descriptor_,
      NetLogicMsgPacket::default_instance_,
      NetLogicMsgPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetLogicMsgPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetLogicMsgPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetLogicMsgPacket));
  NetRoomInfo_descriptor_ = file->message_type(1);
  static const int NetRoomInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetRoomInfo, roomid_),
  };
  NetRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetRoomInfo_descriptor_,
      NetRoomInfo::default_instance_,
      NetRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetRoomInfo));
  PlatformType_descriptor_ = file->enum_type(0);
  LoginType_descriptor_ = file->enum_type(1);
  GameRoomInfo_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CommServerMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetLogicMsgPacket_descriptor_, &NetLogicMsgPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetRoomInfo_descriptor_, &NetRoomInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CommServerMsg_2eproto() {
  delete NetLogicMsgPacket::default_instance_;
  delete NetLogicMsgPacket_reflection_;
  delete NetRoomInfo::default_instance_;
  delete NetRoomInfo_reflection_;
}

void protobuf_AddDesc_CommServerMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023CommServerMsg.proto\"<\n\021NetLogicMsgPack"
    "et\022\014\n\004size\030\001 \002(\005\022\013\n\003cmd\030\002 \002(\005\022\014\n\004data\030\003 "
    "\002(\014\"\035\n\013NetRoomInfo\022\016\n\006roomId\030\001 \002(\005*:\n\014Pl"
    "atformType\022\n\n\006PT_WEB\020\001\022\017\n\013PT_COMPUTLE\020\002\022"
    "\r\n\tPT_MOBILE\020\003*J\n\tLoginType\022\017\n\013LT_ACCOUN"
    "TS\020\001\022\r\n\tLT_GAMEID\020\002\022\014\n\010LT_EMAIL\020\003\022\017\n\013LT_"
    "MOBILENO\020\004*1\n\014GameRoomInfo\022\017\n\013CMD_ROOM_I"
    "D\020\001\022\020\n\014CMD_POS_INFO\020\002", 301);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommServerMsg.proto", &protobuf_RegisterTypes);
  NetLogicMsgPacket::default_instance_ = new NetLogicMsgPacket();
  NetRoomInfo::default_instance_ = new NetRoomInfo();
  NetLogicMsgPacket::default_instance_->InitAsDefaultInstance();
  NetRoomInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CommServerMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CommServerMsg_2eproto {
  StaticDescriptorInitializer_CommServerMsg_2eproto() {
    protobuf_AddDesc_CommServerMsg_2eproto();
  }
} static_descriptor_initializer_CommServerMsg_2eproto_;
const ::google::protobuf::EnumDescriptor* PlatformType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlatformType_descriptor_;
}
bool PlatformType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginType_descriptor_;
}
bool LoginType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameRoomInfo_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRoomInfo_descriptor_;
}
bool GameRoomInfo_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int NetLogicMsgPacket::kSizeFieldNumber;
const int NetLogicMsgPacket::kCmdFieldNumber;
const int NetLogicMsgPacket::kDataFieldNumber;
#endif  // !_MSC_VER

NetLogicMsgPacket::NetLogicMsgPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetLogicMsgPacket::InitAsDefaultInstance() {
}

NetLogicMsgPacket::NetLogicMsgPacket(const NetLogicMsgPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetLogicMsgPacket::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  cmd_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetLogicMsgPacket::~NetLogicMsgPacket() {
  SharedDtor();
}

void NetLogicMsgPacket::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void NetLogicMsgPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetLogicMsgPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetLogicMsgPacket_descriptor_;
}

const NetLogicMsgPacket& NetLogicMsgPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommServerMsg_2eproto();
  return *default_instance_;
}

NetLogicMsgPacket* NetLogicMsgPacket::default_instance_ = NULL;

NetLogicMsgPacket* NetLogicMsgPacket::New() const {
  return new NetLogicMsgPacket;
}

void NetLogicMsgPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = 0;
    cmd_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetLogicMsgPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required int32 cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetLogicMsgPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // required int32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetLogicMsgPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // required int32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetLogicMsgPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required int32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetLogicMsgPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetLogicMsgPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetLogicMsgPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetLogicMsgPacket::MergeFrom(const NetLogicMsgPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetLogicMsgPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetLogicMsgPacket::CopyFrom(const NetLogicMsgPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetLogicMsgPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NetLogicMsgPacket::Swap(NetLogicMsgPacket* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(cmd_, other->cmd_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetLogicMsgPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetLogicMsgPacket_descriptor_;
  metadata.reflection = NetLogicMsgPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetRoomInfo::kRoomIdFieldNumber;
#endif  // !_MSC_VER

NetRoomInfo::NetRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetRoomInfo::InitAsDefaultInstance() {
}

NetRoomInfo::NetRoomInfo(const NetRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetRoomInfo::~NetRoomInfo() {
  SharedDtor();
}

void NetRoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetRoomInfo_descriptor_;
}

const NetRoomInfo& NetRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommServerMsg_2eproto();
  return *default_instance_;
}

NetRoomInfo* NetRoomInfo::default_instance_ = NULL;

NetRoomInfo* NetRoomInfo::New() const {
  return new NetRoomInfo;
}

void NetRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetRoomInfo::MergeFrom(const NetRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetRoomInfo::CopyFrom(const NetRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NetRoomInfo::Swap(NetRoomInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetRoomInfo_descriptor_;
  metadata.reflection = NetRoomInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
