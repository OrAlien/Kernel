// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommServerMsg.proto

#ifndef PROTOBUF_CommServerMsg_2eproto__INCLUDED
#define PROTOBUF_CommServerMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CommServerMsg_2eproto();
void protobuf_AssignDesc_CommServerMsg_2eproto();
void protobuf_ShutdownFile_CommServerMsg_2eproto();

class NetLogicMsgPacket;
class NetRoomInfo;

enum PlatformType {
  PT_WEB = 1,
  PT_COMPUTLE = 2,
  PT_MOBILE = 3
};
bool PlatformType_IsValid(int value);
const PlatformType PlatformType_MIN = PT_WEB;
const PlatformType PlatformType_MAX = PT_MOBILE;
const int PlatformType_ARRAYSIZE = PlatformType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlatformType_descriptor();
inline const ::std::string& PlatformType_Name(PlatformType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlatformType_descriptor(), value);
}
inline bool PlatformType_Parse(
    const ::std::string& name, PlatformType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlatformType>(
    PlatformType_descriptor(), name, value);
}
enum LoginType {
  LT_ACCOUNTS = 1,
  LT_GAMEID = 2,
  LT_EMAIL = 3,
  LT_MOBILENO = 4
};
bool LoginType_IsValid(int value);
const LoginType LoginType_MIN = LT_ACCOUNTS;
const LoginType LoginType_MAX = LT_MOBILENO;
const int LoginType_ARRAYSIZE = LoginType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginType_descriptor();
inline const ::std::string& LoginType_Name(LoginType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginType_descriptor(), value);
}
inline bool LoginType_Parse(
    const ::std::string& name, LoginType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginType>(
    LoginType_descriptor(), name, value);
}
enum GameRoomInfo {
  CMD_ROOM_ID = 1,
  CMD_POS_INFO = 2
};
bool GameRoomInfo_IsValid(int value);
const GameRoomInfo GameRoomInfo_MIN = CMD_ROOM_ID;
const GameRoomInfo GameRoomInfo_MAX = CMD_POS_INFO;
const int GameRoomInfo_ARRAYSIZE = GameRoomInfo_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameRoomInfo_descriptor();
inline const ::std::string& GameRoomInfo_Name(GameRoomInfo value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameRoomInfo_descriptor(), value);
}
inline bool GameRoomInfo_Parse(
    const ::std::string& name, GameRoomInfo* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameRoomInfo>(
    GameRoomInfo_descriptor(), name, value);
}
// ===================================================================

class NetLogicMsgPacket : public ::google::protobuf::Message {
 public:
  NetLogicMsgPacket();
  virtual ~NetLogicMsgPacket();

  NetLogicMsgPacket(const NetLogicMsgPacket& from);

  inline NetLogicMsgPacket& operator=(const NetLogicMsgPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetLogicMsgPacket& default_instance();

  void Swap(NetLogicMsgPacket* other);

  // implements Message ----------------------------------------------

  NetLogicMsgPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetLogicMsgPacket& from);
  void MergeFrom(const NetLogicMsgPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required int32 cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);

  // required bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:NetLogicMsgPacket)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 cmd_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CommServerMsg_2eproto();
  friend void protobuf_AssignDesc_CommServerMsg_2eproto();
  friend void protobuf_ShutdownFile_CommServerMsg_2eproto();

  void InitAsDefaultInstance();
  static NetLogicMsgPacket* default_instance_;
};
// -------------------------------------------------------------------

class NetRoomInfo : public ::google::protobuf::Message {
 public:
  NetRoomInfo();
  virtual ~NetRoomInfo();

  NetRoomInfo(const NetRoomInfo& from);

  inline NetRoomInfo& operator=(const NetRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetRoomInfo& default_instance();

  void Swap(NetRoomInfo* other);

  // implements Message ----------------------------------------------

  NetRoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetRoomInfo& from);
  void MergeFrom(const NetRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomId = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NetRoomInfo)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CommServerMsg_2eproto();
  friend void protobuf_AssignDesc_CommServerMsg_2eproto();
  friend void protobuf_ShutdownFile_CommServerMsg_2eproto();

  void InitAsDefaultInstance();
  static NetRoomInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// NetLogicMsgPacket

// required int32 size = 1;
inline bool NetLogicMsgPacket::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetLogicMsgPacket::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetLogicMsgPacket::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetLogicMsgPacket::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 NetLogicMsgPacket::size() const {
  return size_;
}
inline void NetLogicMsgPacket::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required int32 cmd = 2;
inline bool NetLogicMsgPacket::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetLogicMsgPacket::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetLogicMsgPacket::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetLogicMsgPacket::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 NetLogicMsgPacket::cmd() const {
  return cmd_;
}
inline void NetLogicMsgPacket::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// required bytes data = 3;
inline bool NetLogicMsgPacket::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetLogicMsgPacket::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetLogicMsgPacket::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetLogicMsgPacket::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& NetLogicMsgPacket::data() const {
  return *data_;
}
inline void NetLogicMsgPacket::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void NetLogicMsgPacket::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void NetLogicMsgPacket::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetLogicMsgPacket::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* NetLogicMsgPacket::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetLogicMsgPacket::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NetRoomInfo

// required int32 roomId = 1;
inline bool NetRoomInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetRoomInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetRoomInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetRoomInfo::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 NetRoomInfo::roomid() const {
  return roomid_;
}
inline void NetRoomInfo::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlatformType>() {
  return ::PlatformType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LoginType>() {
  return ::LoginType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameRoomInfo>() {
  return ::GameRoomInfo_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CommServerMsg_2eproto__INCLUDED
